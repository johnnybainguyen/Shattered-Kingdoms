<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="SK_DirectionScan"
   author="Aello"
   id="A1111111B1111CC11111213C"
   language="Lua"
   purpose="Scan all direction"
   date_written="2018-05-12 10:45:35"
   requires="4.94"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Scan all directions
]]>
</description>

</plugin>
<triggers>  
  <trigger
   enabled="y"
   match="^(?:\s*)Obvious exits: .*$"
   lines_to_match="5"
   multi_line="y"
   send_to="12"
   regexp="y"
   sequence="100"
   script = "parseExits"
  >
  </trigger>
</triggers>
<aliases>

  <alias
   match="^(op(?:e|en)?|cl(?:o|os|ose)?) a(?:l|ll)?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="0"
  >
  <send>
if exits ~= nil then
	exits = string.gsub(exits, "Obvious exits:", "")
	exits = string.gsub(exits, "murder hole", "murderhole")
	exits = string.gsub(exits, "barred window", "barredwindow")
	exits = string.gsub(exits, "arrow slit", "arrowslit")
	exits = string.gsub(exits, "damaged wall", "damagedwall")
	for direction in string.gmatch(exits, '([^%s]+)') do
		if string.find("%1", "^cl") then
			if not string.find(direction, "%(") then
				Execute("close " .. direction)
			end
		end
	
		if string.find("%1", "^op") then
			if string.find(direction, "%(closed%)") then
				Execute("open " .. string.gsub(direction, "%(closed%)", ""))
			end
		end
	end
	Send("look")
end
</send>
  </alias>
  
  <alias
   match="^(op(?:e|en)?|pi(?:c|ck)?|cl(?:o|os|ose)?|unl(?:o|oc|ock)?|loc(?:k)?|l(?:o|oo|k)?|retr(?:e|ea|eat)?|rr|exa(?:m|mi|min|mine)?)((?:\s)[0-9a-zA-Z\.\-\'\*]+)?((?:\s)[0-9a-zA-Z\.\-\'\*]+)?(?:\s*)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="1"
  >
  <send>


clientCheck = "%" .. "1"
if "%1" ~= clientCheck then
	command = "%1"
	if command == "rr" then
		command = "retreat"
	end
	if exits ~= nil then 
		if exits then
			exits = string.gsub(exits, "Obvious exits:", "")
		end
		if string.find("%1", "^cl") then
			exits = string.gsub(exits, "%2", "%2" .. "(closed)")
		elseif string.find("%1", "^op") then
			exits = string.gsub(exits, "%2" .. "%(closed%)", "%2")
		end
	end
	Send(command .. getDirection("%2", " anything") .. "%3")
	if string.find("%1", "^unl") then
		Send("open" .. getDirection("%2", " anything"))
	end
else
	if matches[2] == "rr" then
		matches[2] = "retreat"
	end
	if exits ~= nil then 
		if exits then
			exits = string.gsub(exits, "Obvious exits:", "")
		end
		
		if string.find(matches[2], "^cl") then
			exits = string.gsub(exits, matches[3], matches[3] .. "(closed)")
		elseif string.find(matches[2], "^op") then
			exits = string.gsub(exits, matches[3] .. "%(closed%)", matches[3])
		end
	end
	if matches[4] then
		send(matches[2] .. getDirection(matches[3], " anything") .. matches[4])
	elseif matches[3] then
		send(matches[2] .. getDirection(matches[3], " anything"))
		if string.find(matches[2], "^unl") then
			send("open" .. getDirection(matches[3], " anything"))
		end
	else
		send(matches[2])
	end
end

</send>
  </alias>
  <alias
   match="^scan$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="1"
  >
  <send>
if exits ~= nil then
	exits = string.gsub(exits, "Obvious exits:", "")
	exits = string.gsub(exits, "murder hole", "murderhole")
	exits = string.gsub(exits, "barred window", "barredwindow")
	exits = string.gsub(exits, "arrow slit", "arrowslit")
	exits = string.gsub(exits, "damaged wall", "damagedwall")
	for direction in string.gmatch(exits, '([^%s]+)') do
		outputDirection = ""
		if string.find(direction, "^n") or string.find(direction, "^ne") or string.find(direction, "^e") or string.find(direction, "^se") or string.find(direction, "^s") or string.find(direction, "^sw") or string.find(direction, "^w") or string.find(direction, "^nw") or string.find(direction, "^u") or string.find(direction, "^d") then
			if string.find(direction, "closed") or string.find(direction, "%(wall%)") or string.find(direction, "secret") then
				nothing = ""
			elseif string.find(direction, "murderhole") or string.find(direction, "barredwindow") or string.find(direction, "arrowslit") or string.find(direction, "damagedwall") then
				outputDirection = direction
				outputDirection = string.gsub(outputDirection, "%(murderhole%)","")
				outputDirection = string.gsub(outputDirection, "%(barredwindow%)","")
				outputDirection = string.gsub(outputDirection, "%(arrowslit%)","")
				outputDirection = string.gsub(outputDirection, "%(damagedwall%)","")
			else
				outputDirection = direction
			end
		end
		if outputDirection ~= "" then
			Execute("l " .. outputDirection)
		end
	end
end
</send>
  </alias>
  

  
</aliases>

<script>
<![CDATA[

function getDirection(dir, tar)
	direction = dir
	if tar ~= nil and tar ~= "" then
		if dir == " d" then
		   direction = " down"
		elseif dir == " u" then 
		   direction = " up"
		elseif dir == " n" then 
		   direction = " north"
		elseif dir == " ne" then
		   direction = " northeast"
		elseif dir == " e" then
		   direction = " east"
		elseif dir == " se" then
		   direction = " southeast"
		elseif dir == " s" then
		   direction = " south"
		elseif dir == " sw" then
		   direction = " southwest"
		elseif dir == " w" then
		   direction = " west"
		elseif dir == " nw" then
		   direction = " northwest"
		end
	end
	return direction
end

function parseExits (name, line, wildcards, styles)
	continueParsing = true
	line = Trim(line)
	if not string.find(line, "^n") and not string.find(line, "^s") and not string.find(line, "^w") and not string.find(line, "^e") and not string.find(line, "^u") and not string.find(line, "^d") and not string.find(line, "^hole") and not string.find(line, "^window") then
		continueParsing = false
	end
	if string.find(line, "^Obvious exits: ") then
		continueParsing = true
		exits = ""
	end
	if continueParsing then
		exits = exits .. line .. " "
	end
	
end

]]>
</script>
</muclient>