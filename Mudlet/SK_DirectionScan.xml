<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.0">
    <AliasPackage>
        <Alias isActive="yes" isFolder="no">
            <name>Direction Targeting for Opening/Unlock/Close/Pick Doors</name>
            <script>
function getDirection(dir, tar)
	direction = dir
	if tar ~= nil and tar ~= "" then
		if dir == " d" then
		   direction = " down"
		elseif dir == " u" then 
		   direction = " up"
		elseif dir == " n" then 
		   direction = " north"
		elseif dir == " ne" then
		   direction = " northeast"
		elseif dir == " e" then
		   direction = " east"
		elseif dir == " se" then
		   direction = " southeast"
		elseif dir == " s" then
		   direction = " south"
		elseif dir == " sw" then
		   direction = " southwest"
		elseif dir == " w" then
		   direction = " west"
		elseif dir == " nw" then
		   direction = " northwest"
		end
	end
	return direction
end

clientCheck = "%" .. "1"
if "%1" ~= clientCheck then
	command = "%1"
	if command == "rr" then
		command = "retreat"
	end
	if exits ~= nil then 
		if exits then
			exits = string.gsub(exits, "Obvious exits:", "")
		end
		if string.find("%1", "^cl") then
			exits = string.gsub(exits, "%2", "%2" .. "(closed)")
		elseif string.find("%1", "^op") then
			exits = string.gsub(exits, "%2" .. "%(closed%)", "%2")
		end
	end
	Send(command .. getDirection("%2", " anything") .. "%3")
	if string.find("%1", "^unl") then
		Send("open" .. getDirection("%2", " anything"))
	end
else
	if matches[2] == "rr" then
		matches[2] = "retreat"
	end
	if exits ~= nil then 
		if exits then
			exits = string.gsub(exits, "Obvious exits:", "")
		end
		
		if string.find(matches[2], "^cl") then
			exits = string.gsub(exits, matches[3], matches[3] .. "(closed)")
		elseif string.find(matches[2], "^op") then
			exits = string.gsub(exits, matches[3] .. "%(closed%)", matches[3])
		end
	end
	if matches[4] then
		send(matches[2] .. getDirection(matches[3], " anything") .. matches[4])
	elseif matches[3] then
		send(matches[2] .. getDirection(matches[3], " anything"))
		if string.find(matches[2], "^unl") then
			send("open" .. getDirection(matches[3], " anything"))
		end
	else
		send(matches[2])
	end
end</script>
            <command></command>
            <regex>^(op(?:e|en)?|pi(?:c|ck)?|cl(?:o|os|ose)?|unl(?:o|oc|ock)?|loc(?:k)?|l(?:o|oo|k)?|retr(?:e|ea|eat)?|rr|exa(?:m|mi|min|mine)?)((?:\s)[0-9a-zA-Z\.\-\'\*]+)?((?:\s)[0-9a-zA-Z\.\-\'\*]+)?(?:\s*)$</regex>
        </Alias>
		<Alias isActive="yes" isFolder="no">
			<name>scan Command</name>
			<script>
if exits ~= nil then
	exits = string.gsub(exits, "Obvious exits:", "")
	exits = string.gsub(exits, "murder hole", "murderhole")
	exits = string.gsub(exits, "barred window", "barredwindow")
	exits = string.gsub(exits, "arrow slit", "arrowslit")
	exits = string.gsub(exits, "damaged wall", "damagedwall")
	for direction in string.gmatch(exits, '([^%s]+)') do
		outputDirection = ""
		if string.find(direction, "^n") or string.find(direction, "^ne") or string.find(direction, "^e") or string.find(direction, "^se") or string.find(direction, "^s") or string.find(direction, "^sw") or string.find(direction, "^w") or string.find(direction, "^nw") or string.find(direction, "^u") or string.find(direction, "^d") then
			if string.find(direction, "closed") or string.find(direction, "%(wall%)") or string.find(direction, "secret") then
				nothing = ""
			elseif string.find(direction, "murderhole") or string.find(direction, "barredwindow") or string.find(direction, "arrowslit") or string.find(direction, "damagedwall") then
				outputDirection = direction
				outputDirection = string.gsub(outputDirection, "%(murderhole%)","")
				outputDirection = string.gsub(outputDirection, "%(barredwindow%)","")
				outputDirection = string.gsub(outputDirection, "%(arrowslit%)","")
				outputDirection = string.gsub(outputDirection, "%(damagedwall%)","")
			else
				outputDirection = direction
			end
		end
		if outputDirection ~= "" then
			send("l " .. outputDirection)
		end
	end
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^scan$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>Walking Direction Alias</name>
			<script>
function getDirection(dir, tar)
	direction = dir
	if tar ~= nil and tar ~= "" then
		if dir == " d" then
		   direction = " down"
		elseif dir == " u" then 
		   direction = " up"
		elseif dir == " n" then 
		   direction = " north"
		elseif dir == " ne" then
		   direction = " northeast"
		elseif dir == " e" then
		   direction = " east"
		elseif dir == " se" then
		   direction = " southeast"
		elseif dir == " s" then
		   direction = " south"
		elseif dir == " sw" then
		   direction = " southwest"
		elseif dir == " w" then
		   direction = " west"
		elseif dir == " nw" then
		   direction = " northwest"
		end
	end
	return direction
end

send(string.trim(getDirection(" " .. matches[2], "anything")))</script>
			<command></command>
			<packageName></packageName>
			<regex>^(ne|se|sw|nw|n|e|s|w|u|d)$</regex>
		</Alias>
    </AliasPackage>
	<TriggerPackage>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Exit Save</name>
			<script>
if string.find(matches[2], "^Obvious exits:$") then
	exits = ""
elseif string.find(matches[2], "Obvious exits: ") then
  exits = matches[2]
else
  exits = exits .. " " .. matches[2]
end</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>1</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<regexCodeList>
				<string>^(?:\s*)(Obvious exits:.*)$</string>
				<string>^((ne|se|sw|nw|n|s|e|w|u|d)\((barred window|murder hole|closed|wall)\).*)$</string>
				<string>^(hole\).*)</string>
				<string>^(window\).*)</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
			</regexCodePropertyList>
		</Trigger>
	</TriggerPackage>
</MudletPackage>
