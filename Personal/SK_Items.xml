<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="SK_Items"
   author="Aello"
   id="1C111111AA111B11111C111B"
   language="Lua"
   purpose="Manages all identify/lores of the game"
   date_written="2018-05-12 10:45:35"
   requires="4.94"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Manages all identify/lores of the game
]]>
</description>
</plugin>

<triggers>
	<!--  Identify Triggers  -->
	<trigger
		enabled="n"
		name="identifyTrigger"
		match="^(\> )*This is"
		regexp="y"
		send_to="12"
		sequence="99"
	>
		<send>DoAfterSpecial(.1, 'idOutput()', 12)</send>
	</trigger>
	<trigger
		enabled="y"
		match="^(\> )*(You are not holding that.|You failed.|Your efforts with a polished ruby lens produce only smoke and sparks.|Your efforts with a kaleidoscopic loupe produce only smoke and sparks.)"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>identifyQueueTrigger(-1)</send>
	</trigger>
	<trigger
		enabled="y"
		match="^(\> )*(You zap a polished ruby lens.|You zap a kaleidoscopic loupe.)"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>identifyQueueTrigger(1)</send>
	</trigger>
	
	<!--  Lore Triggers  -->
	<trigger
		enabled="n"
		name="loreTrigger"
		match="^(\> )*This is"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>DoAfterSpecial(.1, 'loreOutput()', 12)</send>
	</trigger>
	<trigger
		enabled="y"
		match="^(\> )*(You draw a blank.  Perhaps with more effort...|You do not have that item at hand to study.)"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>loreQueueTrigger(-1)</send>
	</trigger>
	<!-- Items Triggers -->
	<trigger
		enabled="y"
		match="^(\> )*(You are carrying:|.* contains:|You are using:|.* is using:)$"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>EnableTrigger ("itemTrigger", true)</send>
	</trigger>
	<trigger
		enabled="n"
		match="^.*$"
		name="itemTrigger"
		omit_from_output="y"
		regexp="y"
		send_to="12"
		sequence="100"
		script="loadItemInfo"
	>
	</trigger>
	<trigger
		enabled="y"
		match="^(Items for sale:)$"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>EnableTrigger ("storeTrigger", true)</send>
	</trigger>
	<trigger
		enabled="n"
		match="^.*$"
		name="storeTrigger"
		omit_from_output="y"
		regexp="y"
		send_to="12"
		sequence="100"
		script="loadStoreInfo"
	>
	</trigger>
</triggers>
<aliases>
	<!--  Identify Aliases  -->
	<alias
		match="^(c '?(id|ide|iden|ident|identi|identif|identify))'? ([0-9a-zA-Z\.\-']+)$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			identifyQueueTrigger(1)
			Send ("c identify " .. "%3")
		</send>
	</alias>
	<alias
		match="^idn$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>sayOutput("identifiedItem", false)</send>
	</alias>
	<alias
		match="^ido$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>sayOutput("identifiedItem", true)</send>
	</alias>
  
	<alias
		match="^id1$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			id1 = GetVariable("id1") or ""
			SetClipboard(id1)
			Note("HTML Item Name Copied to Clipboard")
		</send>
	</alias>
	<alias
		match="^id2$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			id2 = GetVariable("id2") or ""
			SetClipboard(id2)
			Note("HTML Identify Data Copied to Clipboard")
		</send>
	</alias>

	<!--  Lore Aliases  -->
	<alias
		match="^(lore|lor) ([0-9a-zA-Z\.\-']+)$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			loreQueueTrigger(1)
			Send ("lore " .. "%2")
		</send>
	</alias>
	<alias
		match="^lrn$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			sayOutput("loredItem", false)
			sayOutput("loredItemIdentify", false)
		</send>
	</alias>
	<alias
		match="^lro$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			sayOutput("loredItem", true)
			sayOutput("loredItemIdentify", true)
		</send>
	</alias>
	<alias
		match="^lr1$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			lr1 = GetVariable("lr1") or ""
			SetClipboard(lr1)
			Note("HTML Lore Name Copied to Clipboard")
		</send>
	</alias>
	<alias
		match="^lr2$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			lr2 = GetVariable("lr2") or ""
			lr3 = GetVariable("lr3") or ""
			SetClipboard(lr2 .. lr3)
			Note("HTML Lore Data Copied to Clipboard")
		</send>
	</alias>
	<alias
		match="^item show$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			query = "SELECT item_id, item_name_plain, item_name_html FROM items ORDER BY item_id"
			searchResults = searchDatabase(query)
			if #searchResults == 0 then
				ColourNote("red", "black", "No items in database")
			end
			for _, data in ipairs(searchResults) do
				HTMLtoDisplay(data["item_name_html"], string.format ("%-5s", data["item_id"]), "darkorange")
			end
			Note("")
		</send>
	</alias>
	<alias
		match="^item load ([0-9]+)$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			query = "SELECT item_name_ansi, item_name_html, item_identify_ansi, item_identify_html, item_lore_story_ansi, item_lore_story_html, item_lore_identify_ansi, item_lore_identify_html, item_name_plain, item_identify_plain FROM items WHERE item_id = %1"
			searchResults = searchDatabase(query)
			
			if #searchResults == 1 then
				HTMLtoDisplay(searchResults[1]["item_name_html"], "Loaded item: ", "darkviolet")
				if searchResults[1]["item_identify_html"] ~= "" then
					HTMLtoDisplay(searchResults[1]["item_identify_html"])
					Note()
				end
				if searchResults[1]["item_lore_story_html"] ~= "" then
					HTMLtoDisplay(searchResults[1]["item_lore_story_html"])
					Note()
				end
				if searchResults[1]["item_lore_identify_html"] ~= "" then
					HTMLtoDisplay(searchResults[1]["item_lore_identify_html"])
					Note()
				end
				SetVariable("identifiedItem", searchResults[1]["item_identify_ansi"])
				SetVariable("loredItem", searchResults[1]["item_lore_story_ansi"])
				SetVariable("loredItemIdentify", searchResults[1]["item_lore_identify_ansi"])
				SetVariable("id1", searchResults[1]["item_name_html"])
				SetVariable("id2", searchResults[1]["item_identify_html"])
				SetVariable("lr1", searchResults[1]["item_name_html"])
				SetVariable("lr2", searchResults[1]["item_lore_story_html"] .. searchResults[1]["item_lore_identify_html"])
				SetClipboard(searchResults[1]["item_identify_plain"])
			else
				ColourNote("red", "black", "No such item in database.")
			end
		</send>
	</alias>
	<alias
		match="^item delete ([0-9]+)$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			deleteItem("%1")
			Note("Item %1 deleted")
		</send>
	</alias>
	<alias
		match="^item search (.*)$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			query = 'SELECT item_id, item_name_plain, item_name_ansi, item_identify_ansi, item_name_html, item_identify_html FROM items WHERE item_name_plain LIKE "%' .. "%1" .. '%"'
			searchResults = searchDatabase(query)
			
			if #searchResults == 0 then
				ColourNote("red", "black", "No items in database.")
			elseif #searchResults == 1 then
				Execute("item load " .. searchResults[1]["item_id"])
			else
				ColourNote("darkviolet", "black", "Search Results for '" .. "%1" .. "':")
				for _, data in ipairs(searchResults) do
					HTMLtoDisplay(data["item_name_html"], string.format ("%-5s", data["item_id"]), "darkorange")
				end
				Note("")
			end
		</send>
	</alias>

	<alias
		match="^item identify (.*)$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			query = 'SELECT item_id, item_name_plain, item_name_ansi, item_identify_ansi, item_name_html, item_identify_html FROM items WHERE item_identify_plain LIKE "%' .. "%1" .. '%" OR item_lore_identify_plain LIKE "%' .. "%1" .. '%"'
			searchResults = searchDatabase(query)
			
			if #searchResults == 0 then
				ColourNote("red", "black", "No items found in database.")
			elseif #searchResults == 1 then
				Execute("item load " .. searchResults[1]["item_id"])
			else
				ColourNote("darkviolet", "black", "Search Results for '" .. "%1" .. "':")
				for _, data in ipairs(searchResults) do
					HTMLtoDisplay(data["item_name_html"], string.format ("%-5s", data["item_id"]), "darkorange")
				end
				Note("")
			end
		</send>
	</alias>
	
	<alias
		match="^item rune (slightly|moderately|greatly) (.*)$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			runeStrength = "%1"
			runeName = "%2"
			searchStructure = "It bears an innate endowment to " .. runeStrength .. " increase " .. runeName .. "."
			
			query = 'SELECT item_id, item_name_plain, item_name_ansi, item_identify_ansi, item_name_html, item_identify_html FROM items WHERE item_identify_plain LIKE "%' .. searchStructure .. '%"'
			searchResults = searchDatabase(query)
			
			if #searchResults == 0 then
				ColourNote("red", "black", "No items found in database.")
			elseif #searchResults == 1 then
				Execute("item load " .. searchResults[1]["item_id"])
			else
				ColourNote("darkviolet", "black", "Search Results for '" .. "%1" .. "':")
				for _, data in ipairs(searchResults) do
					HTMLtoDisplay(data["item_name_html"], string.format ("%-5s", data["item_id"]), "darkorange")
				end
				Note("")
			end
		</send>
	</alias>
	<alias
		match="^item .*$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="300"
	>
		<send>ColourNote("red", "black", "Invalid Item command")</send>
	</alias>
	<alias
		match="^item load delete$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>deleteAllItems()</send>
	</alias>
	<alias
		match="^item load server$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			ColourNote("orange", "black", "Loading all Items into client's database (It will freeze MUSHclient, so dont touch until it is done)")
			DoAfterSpecial (.5, 'loadItemServerCSV()', sendto.script)
		</send>
	</alias>
	<alias
		match="^item load update$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>loadItemServerUpdate()</send>
	</alias>
	<alias
		match="^item load copy$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>os.execute("copy " .. GetInfo (66) .. "sk_items.sqlite " .. GetInfo (66) .. "sk_items_server.sqlite")</send>
	</alias>
	<alias
		match="^item load download$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>downloadDatabase()</send>
	</alias>
	<alias
		match="^item commands$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			ColourNote("green", "black", "Item Database Plugin Loaded")
			ColourNote("red", "black", "Usage:")
			ColourNote("red", "black", "item show")
			ColourNote("darkviolet", "black", "  -- This will show a list of all items in the database")
			ColourNote("red", "black", "item load #")
			ColourNote("darkviolet", "black", "  -- This will show the Identify and/or Lore of the item")
			ColourNote("red", "black", "item search [keyword]")
			ColourNote("darkviolet", "black", "  -- This allows you to search for a keyword, for example item search waterskin")
			ColourNote("red", "black", "item rune [slightly/moderately/greatly] stat")
			ColourNote("darkviolet", "black", "  -- This allows you to search for a stat you would like, for example item rune greatly strength")
			ColourNote("red", "black", "item load server")
			ColourNote("darkviolet", "black", "  -- Loads all items from server database.  Type 'load item delete' first for a fresh install")
			ColourNote("red", "black", "item load delete")
			ColourNote("darkviolet", "black", "  -- Deletes all items from client database.")
			ColourNote("red", "black", "ido")
			ColourNote("darkviolet", "black", "  -- says the identification of caught text or loaded item")
			ColourNote("red", "black", "lro")
			ColourNote("darkviolet", "black", "  -- says the lore of the loaded item caught text or loaded item")
		</send>
	</alias>
</aliases>

<script>
<![CDATA[
http = require "socket.http" 
socket = require "socket"

filteredEchoes = {
	"> ", ".* [sayyellexclaimasktellreplysaysyellsexclaimsaskstellsreplies]+ [tothe ]*.*'.+'", "%[[DRUIDFISTHAMMERHARLEQUINMIDNIGHTCRUCIBLETALONKEEPERLEGIONHANDALLIANCE]+%] .*", "A lightly falling snow is being driven by a strong wind%.", "It's raining lightly%.", "It's nice and warm out%.", "The snow is coming down faster now%.", "It's cool out here%.", "Drifts in the snow are being formed by the wind%.", "A freezing wind blows gently, but firmly against all obstacles in the area%.", "A light snow is falling amidst an unsettled wind%.", "A light drizzle is falling here%.", "It rains a bit harder%.", "The rain stops%.", "A cool breeze wafts by%.", "The rain is falling less heavily now%.", "The rain turns to snow%.", "The snow has let up a little%.", "The snow turns to a cold rain%.", "The wind and a bit of rain hint at the possibility of a storm%.", "The wind isn't very strong here, but the cold makes it quite noticeable%.", "It stops snowing%.", "It's cold!", "It's mild out today%.", "The breeze dies away to nothing%.", "The wind begins to blow from the [northsoutheastwest]+%.", "The wind changes and begins blowing from the [northsoutheastwest]+%.", "The sun slowly disappears in the [northsoutheastwest]+%.", "It's hotter than anyone could imagine%.", "A blast of freezing wind chills you to the bone%.   ", "It's really c-c-c-cold!!", "Better get inside - this is too cold for man or -most- beasts%.", "It's a bit nippy here%.", "A warm pocket of air is rolling through here%.", "It's really, really hot here%.  A slight breeze would really improve things%.", "The breeze dies away to nothing%.", "There's a blizzard out here, making it quite difficult to see%.", "The snow turns to a cold rain%.", "A light drizzle is falling here%.", "The arid wind brings no relief%.   ", "A few drops of rain are falling amidst a fierce windstorm%", "A magical gate vanishes into thin air%.", "The city stirs to shake off the night as a new day begins%.", "The comforts of the inn put you at ease%.", "You feel an effervescent energy dissipate into your dreams%.", "You are hungry%.", "You are thirsty%.", "Your pulse slows to normal%.", "Death arrives and escorts your soul to the spirit world%.", "The Teronian Temple bell strikes six times, ringing loudly through the streets%.", "The mystic portal vanishes into thin air%.", "A bracer made of mithril scales on .*'s wrist shimmers slightly%.", "The city stirs to shake off the night as a new day begins%.", "A corpse of .* decays into dust%.", "The deathly silence is broken by a muffled whistle of arctic air%.   ", "The .* crumbles into dust%.", "The plants recede back into the ground%.", "It's breezy%.", "A slight wind blows a chill into living tissue%.", ".* regains consciousness and rises unsteadily to .* feet%.", "The shuffling of feet can be heard in the distance%.", "Drip%.%.%.Drip%.%.%.Drip%.%.%.", "The city slows, drawing in on itself as dusk gathers and another day ends%.", "In the distance, Peacekeepers call the changing of the guard%.", "It's hot out here%.", "A ruddy pebble on a chain worn by .* glows red momentarily%.", "The stones glow eerily%.%.%.", "A glowing portal snaps into existence in the midst of the stones!", "The clinking of metal on stone resounds through the caves%.", "An aura of divine blessing surrounds .*%.", "Touched by a light breeze, the clouds rearrange themselves%.   ", "The ether wire phases partially out of existence%. ", "You are ready to summon another treant%.", "The white aura around your body fades%.", "Your symbol slowly begins to melt and reform!", "You hear a distant rumble as stone shifts somewhere deep below you%.", "The faint chirping of a songbird breaks the eerie silence%.", "The night has begun%.", "The day has begun%.", "The sun rises in the [northeastwestsouth]+.", "Your .* explodes into fragments%.", "Hey, it's raining%.%.%.", "You hear the wind rustle through the trees%.", "The scent of flowers, foliage, and fertile soil fills the air%.", "You give .* to .*%.", ".* gives you .*%.", ".* holds .* in [hisherits]+ hand%."
}

filteredSpells = {
	"cause light", "curse", "blindness", "chill touch", "deafness", "detect invis", "cause serious", "detect hidden", "invis", "poison", "identify", "protection", "weaken", "holy symbol", "armor", "cause light", "death shroud", "detect magic", "blindness", "chill touch", "continual light", "deafness", "detect hidden", "detect invis", "animate dead", "cause serious", "fly", "identify", "sleep", "weaken", "curse", "infravision", "poison", "shield", "slow", "teleport", "armor", "bless", "cure light", "refresh", "call armor", "create water", "cure blindness", "cure deafness", "cure disease", "detect invis", "cure serious", "flamestrike", "frenzy", "identify", "create food", "know alignment", "protection", "remove curse", "holy symbol", "armor", "bless", "continual light", "cure light", "detect magic", "refresh", "create water", "cure blindness", "cure deafness", "detect poison", "frenzy", "holy symbol", "protection", "cure serious", "identify", "magical vestment", "spirit sight", "cancellation", "create food", "cure poison", "know alignment", "regeneration", "remove curse", "armor", "bless", "cure light", "refresh", "create water", "cure blindness", "cure deafness", "spirit doll", "slow", "water breathing", "blindness", "cure serious", "deafness", "identify", "sleep", "spirit sight", "create food", "cure poison", "curse", "infravision", "regeneration", "remove curse", "armor", "change sex", "detect buried", "detect magic", "magic missile", "ventriloquate", "color spray", "continual light", "detect hidden", "detect invis", "fly", "invis", "enlarge", "giant strength", "identify", "infravision", "shrink", "sleep", "acid blast", "cancellation", "mirror image", "shield", "teleport", "understand", "create spring", "detect buried", "faerie fire", "healing rays", "shocking grasp", "continual light", "detect hidden", "detect invis", "detect poison", "fly", "burning hands", "dig", "infravision", "invis", "water breathing", "control weather", "cure poison", "lightning bolt", "resist elements", "cure critical", "faerie fog", "flamestrike", "raise dead", "cure disease", "locate object", "sanctuary", "spear of faith", "summon", "consecrate armor", "consecrate item", "consecrate weapon", "detect aura", "harm", "heal", "recharge", "exorcism", "gate", "mass healing", "resurrection", "holy word", "word of recall", "cure critical", "spear of faith", "locate object", "sanctuary", "bolt of glory", "detect aura", "holy word", "word of recall", "consecrate armor", "plague", "shield", "cause critical", "rift", "detect aura", "hellfire", "domination", "word of recall", "consecrate weapon", "cure critical", "dispel magic", "flamestrike", "frenzy", "raise dead", "spirit aura", "call lightning", "control weather", "cure disease", "weaken", "exorcism", "heal", "sanctuary", "seance", "spirit horde", "word of recall", "voodoo", "airy water", "charm person", "dispel magic", "etherealform", "haste", "tongues", "locate object", "mass invis", "polymorph", "summon", "detect aura", "enchant armor", "enchant item", "enchant weapon", "recharge", "depetrification", "gate", "petrification", "spell ward", "final strike", "conjure elemental", "fireball", "mass invis", "stone skin", "breath of life", "earthquake", "ironguard", "recharge", "chain lightning", "cone of cold", "magma spray", "cause critical", "dispel magic", "feeblemind", "plague", "fear", "locate object", "summon", "vampiric touch", "control undead", "detect aura", "recharge", "rift", "energy drain", "spell ward", "enchant weapon", "finger of death"
}

filteredItemEndings = {
	"obsidian coins", "a single obsidian coin", "platinum coins", "a single platinum coin", "gold coins", "a single gold coin", "silver coins", "a single silver coin", "copper coins", "a single copper coin", "filled with water"	
}

filteredItemsStartings = {
}

whiteListedItems = {
	"a shard of hellfire", "a belt of hellfire", "a scroll of identify"
}

function isFilteredItem(itemName)
	return checkWhiteListedItem(itemName) and (checkFilteredItemStarting(itemName) or checkFilteredItemEnding(itemName) or checkSpellFilteredItem(itemName))
end

function checkWhiteListedItem(itemName)
	isWhiteListedItem = false
	for i, whiteListedItem in ipairs(whiteListedItems) do
		if itemName == whiteListedItem then
			isWhiteListedItem = true
			break
		end
	end
	return not isWhiteListedItem
end

function checkFilteredItemEnding(itemName)
	isFilteredItemEnding = false
	for i, filteredItemEnding in ipairs(filteredItemEndings) do
		if string.find(itemName, filteredItemEnding .. "$") then
			isFilteredItemEnding = true
			break
		end
	end
	return isFilteredItemEnding
end

function checkFilteredItemStarting(itemName)
	isFilteredItemStarting = false
	for i, filteredItemsStarting in ipairs(filteredItemsStartings) do
		if string.find(itemName, "^" .. filteredItemsStarting) then
			isFilteredItemStarting = true
			break
		end
	end
	return isFilteredItemStarting
end

function checkSpellFilteredItem(itemName)
	isSpellFilteredItem = false
	for i, filteredSpell in ipairs(filteredSpells) do
		if string.find(itemName, "of " .. filteredSpell .. "$") or string.find(itemName, "of [a-zA-Z%s]+, " .. filteredSpell .. "$") or string.find(itemName, "of [a-zA-Z%s]+, [a-zA-Z%s]+, " .. filteredSpell .. "$") then
			isSpellFilteredItem = true
			break
		end
	end
	return isSpellFilteredItem
end

function OnPluginConnect()
	Execute("item commands")
end

function OnPluginInstall()
	SetVariable("loreQueue", "0")
	SetVariable("identifyQueue", "0")
	db = "sk_items"
	DatabaseOpen (db, GetInfo (66) .. "sk_items.sqlite", 6)
	status = DatabaseExec (db, [[
		--DROP TABLE IF EXISTS items;
		CREATE TABLE IF NOT EXISTS items(
			item_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
			item_name_plain      TEXT NOT NULL DEFAULT '',
			item_name_ansi      TEXT NOT NULL UNIQUE,
			item_name_html      TEXT NOT NULL DEFAULT '',
			item_identify_plain    TEXT NOT NULL DEFAULT '',
			item_identify_ansi    TEXT NOT NULL DEFAULT '',
			item_identify_html    TEXT NOT NULL DEFAULT '',
			item_lore_identify_plain    TEXT NOT NULL DEFAULT '',
			item_lore_identify_ansi    TEXT NOT NULL DEFAULT '',
			item_lore_identify_html    TEXT NOT NULL DEFAULT '',
			item_lore_story_plain    TEXT NOT NULL DEFAULT '',
			item_lore_story_ansi    TEXT NOT NULL DEFAULT '',
			item_lore_story_html    TEXT NOT NULL DEFAULT ''
		);
	]])
	
	if status ~= sqlite3.OK then
		print ("Error creating items table: ", DatabaseError(db))
	end
	DatabaseClose (db)
end

function rtrim(s)
	local n = #s
	while n > 0 and s:find("^%s", n) do n = n - 1 end
	return s:sub(1, n)
end

function chatRedirect (styles)
	require "serialize"
	check(CallPlugin ("10778718503f0c91106745f5", "display", serialize.save_simple (styles)))
end

hexTagToSKColor = function(htmlString)
	colorOutput = string.match(htmlString, "<font color='#([a-zA-Z0-9]+)'>")
	return getSKColor(hex_to_ole(colorOutput))
end

function getSKColor(colorCode)
	skColors = {
		black = "$0",
		blue = "$1",
		green = "$2",
		cyan = "$3",
		red = "$4",
		magenta = "$5",
		brown = "$6",
		lightgray = "$7",
		darkgray= "$0$I",
		brightblue = "$1$I",
		brightgreen = "$2$I",
		brightcyan = "$3$I",
		brightred = "$4$I",
		brightmagenta = "$5$I",
		yellow = "$6$I",
		white = "$7$I"}

	clientColors = {
		black = GetNormalColour(1), 
		blue = GetNormalColour(5),
		green = GetNormalColour(3),
		cyan = GetNormalColour(7),
		red = GetNormalColour(2),
		magenta = GetNormalColour(6),
		brown = GetNormalColour(4),
		lightgray = GetNormalColour(8),
		darkgray= GetBoldColour(1),
		brightblue = GetBoldColour(5),
		brightgreen = GetBoldColour(3),
		brightcyan = GetBoldColour(7),
		brightred = GetBoldColour(2),
		brightmagenta = GetBoldColour(6),
		yellow = GetBoldColour(4),
		white = GetBoldColour(8)}
	
	matchedColor = "lightgray"
	for color, code in pairs(clientColors) do
		if code == colorCode then
			matchedColor = color
			break
		end
	end
	
	return skColors[matchedColor]
end

function rgb_to_hex(col)
    local b, g, r = string.match(string.format("%06x", col), "([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])")
    return "#"..r..g..b
end

function hex_to_ole(hex)
	local r, g, b = string.match(hex, "([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])")
	return tonumber(r, 16) + (tonumber(g, 16) * 256) + (tonumber(b, 16) * 256 * 256)
end

function hex_to_sk(hex)
	return getSKColor(hex_to_ole(hex))
end

function idOutput()
	total_lines = GetLinesInBufferCount ()
	identifyStart = findLastThisLine()
	identifyEnd = identifyStart

	for line = identifyStart, total_lines do
		currentLine = GetLineInfo(line)
		if currentLine.text == "" or isEscapeIdentifyByLineNumber(line) then
			identifyEnd = line - 1
			break
		end 
	end
	
	itemIdentifyHTML = getHTMLByLines(identifyStart, identifyEnd)
	itemNameHTML = getHTMLNameByLine(identifyStart, identifyEnd)
	itemNameANSI = HTMLToANSI(itemNameHTML)
	itemIdentifyANSI = HTMLToANSI(itemIdentifyHTML)
	itemNamePlain = HTMLToPlain(itemNameHTML)
	itemIdentifyPlain = HTMLToPlain(itemIdentifyHTML)

	SetVariable("id1", itemNameHTML)
	SetVariable("id2", itemIdentifyHTML)
	SetVariable("identifiedItem", itemIdentifyANSI)
	
	itemIdentifyHTMLDatabase = HTMLRemoveEnchantments(itemIdentifyHTML)
	itemNameHTMLDatabase = HTMLRemoveEnchantments(itemNameHTML)
	itemNameANSIDatabase = HTMLToANSI(itemNameHTMLDatabase)
	itemIdentifyANSIDatabase = HTMLToANSI(itemIdentifyHTMLDatabase)
	itemNamePlainDatabase = HTMLToPlain(itemNameHTMLDatabase)
	itemIdentifyPlainDatabase = HTMLToPlain(itemIdentifyHTMLDatabase)

	if not isFilteredItem(itemNamePlainDatabase) then
		insertIdentify(itemNamePlainDatabase, itemNameANSIDatabase, itemNameHTMLDatabase, itemIdentifyPlainDatabase, itemIdentifyANSIDatabase, itemIdentifyHTMLDatabase)
		uploadItem(itemNamePlainDatabase, itemNameANSIDatabase, itemNameHTMLDatabase, itemIdentifyPlainDatabase, itemIdentifyANSIDatabase, itemIdentifyHTMLDatabase, "", "", "", "", "", "")
	end
	identifyQueueTrigger(-1)
end

function loreOutput()
	total_lines = GetLinesInBufferCount ()
	identifyStart = findLastThisLine()
	loreEnd = identifyStart - 1
	loreStart = identifyStart
	identifyEnd = identifyStart
	
	if not string.find(GetLineInfo(identifyStart).text, "^> ") then
		if GetLineInfo(identifyStart - 1).text == "" then
			lineCheck = GetLineInfo(identifyStart - 2)
			if not string.find(lineCheck.text, "^lore ") and not string.find(lineCheck.text, "^lor ") and not isEscapeIdentifyByLineNumber(identifyStart - 2) then
				loreEnd = identifyStart - 2
				for line = loreEnd, loreEnd - 50, -1 do
					currentLine = GetLineInfo(line)
					if isEscapeIdentifyByLineNumber(line) then
						loreStart = line + 1
						break
					end 
				end
			end
		end
	end
	
	for line = identifyStart, total_lines do
		currentLine = GetLineInfo(line)
		if currentLine.text == "" or isEscapeIdentifyByLineNumber(line) then
			identifyEnd = line - 1
			break
		end 
	end
	
	itemLoreStoryHTML = getHTMLByLines(loreStart, loreEnd)
	itemLoreIdentifyHTML = getHTMLByLines(identifyStart, identifyEnd)
	itemLoreNameHTML = getHTMLNameByLine(identifyStart, identifyEnd)
	itemLoreNameANSI = HTMLToANSI(itemLoreNameHTML)
	itemLoreStoryANSI = HTMLToANSI(itemLoreStoryHTML)
	itemLoreIdentifyANSI = HTMLToANSI(itemLoreIdentifyHTML)
	itemLoreNamePlain = HTMLToPlain(itemLoreNameHTML)
	itemLoreStoryPlain = HTMLToPlain(itemLoreStoryHTML)
	itemLoreIdentifyPlain = HTMLToPlain(itemLoreIdentifyHTML)
	
	SetVariable("loredItem", itemLoreStoryANSI)
	SetVariable("loredItemIdentify", itemLoreIdentifyANSI)
	SetVariable("lr1", itemLoreNameHTML)
	SetVariable("lr2", itemLoreStoryHTML .. itemLoreIdentifyHTML)
	
	if not isFilteredItem(itemLoreNamePlain) then
		insertLore(itemLoreNamePlain, itemLoreNameANSI, itemLoreNameHTML, itemLoreStoryPlain, itemLoreStoryANSI, itemLoreStoryHTML, itemLoreIdentifyPlain, itemLoreIdentifyANSI, itemLoreIdentifyHTML)
		uploadItem(itemLoreNamePlain, itemLoreNameANSI, itemLoreNameHTML, "", "", "", itemLoreIdentifyPlain, itemLoreIdentifyANSI, itemLoreIdentifyHTML, itemLoreStoryPlain, itemLoreStoryANSI, itemLoreStoryHTML)
	end

	loreQueueTrigger(-1)
end

function isEscapeIdentify(currentLine)
	booleanEscapeIdentify = false
	
	if string.find(currentLine, "^%[HP:") then
		booleanEscapeIdentify = booleanEscapeIdentify or true
	end
	
	if not booleanEscapeIdentify then
		for _, filteredEcho in ipairs(filteredEchoes) do
			booleanEscapeIdentify = string.find(currentLine, "^[> ]*" .. filteredEcho .. "$")
			if booleanEscapeIdentify then
				break
			end
		end
	end
	return booleanEscapeIdentify
end

function isEscapeIdentifyByLineNumber(lineNumber)
	currentLine = GetLineInfo(lineNumber)
	booleanEscapeIdentify = false
	
	if currentLine.note or currentLine.user or string.find(currentLine.text, "^%[HP:") then
		booleanEscapeIdentify = booleanEscapeIdentify or true
	end
	
	if not booleanEscapeIdentify then
		for _, filteredEcho in ipairs(filteredEchoes) do
			booleanEscapeIdentify = string.find(currentLine.text, "^[> ]*" .. filteredEcho .. "$")
			if booleanEscapeIdentify then
				break
			end
		end
	end
	return booleanEscapeIdentify
end
	
function HTMLtoDisplay(htmlString, pretext, pretextColor)	
	display = htmlString
	display = string.gsub(display, "<br><br></font></font></code></pre></td></tr></table>", "<br></font></font></code></pre></td></tr></table>")
	display = string.gsub(display, "<br></font></font></code></pre></td></tr></table>", "</font></font></code></pre></td></tr></table>")
	display = string.gsub(display, "<table[%sa-zA-Z0-9='#]*><tr><td><pre><code>", "")
	display = string.gsub(display, "</code></pre></td></tr></table>", "")
	display = string.gsub(display, "<br>", "\r\n")
	display = string.gsub(display, "<font[%s%a='%d']* face='[a-zA-Z,%s]+'>", "")
	display = string.gsub(display, "</font>", "")
	if pretext ~= nil and pretextColor ~= nil then
		ColourTell(pretextColor, "black", pretext)
	end
	while string.find(display, "<font color='(#[a-zA-Z0-9]+)'>")
	do
		_, _, hexCode = string.find(display, "<font color='(%#[a-zA-Z0-9]+)'>", 1)
		display = string.gsub(display, "<font color='(%#[a-zA-Z0-9]+)'>", "", 1)
		_, _, outputString = string.find(display, "^([a-zA-Z0-9%s%.%,%-%(%)'\"%%;]*)", 1)
		display = string.gsub(display, "^([a-zA-Z0-9%s%.%,%-%(%)'\"%%;]*)", "", 1)
		ColourTell(hexCode, "black", outputString)
	end
	if htmlString ~= "" then
		Note()
	end
end

function HTMLToPlain(htmlString)
	htmlPlain = string.gsub(htmlString, "<br>", " ")
	htmlPlain = string.gsub(htmlPlain, "<[^>]+>", "")
	htmlPlain = Trim(htmlPlain)
	return htmlPlain
end

function HTMLToANSI(htmlString)
	htmlANSI = string.gsub(htmlString, "<font[%s%a='%d']* face='[a-zA-Z,%s]+'>", "")
	htmlANSI = string.gsub(htmlANSI, "<br>", " ")
	htmlANSI = string.gsub(htmlANSI, "</font>", "")
	htmlANSI = string.gsub(htmlANSI, "<font color='#[a-zA-Z0-9]+'>", hexTagToSKColor)
	htmlANSI = string.gsub(htmlANSI, "<[^>]+>", "")
	htmlANSI = Trim(htmlANSI)
	return htmlANSI
end

function HTMLRemoveEnchantments(htmlString)
	cleanEnchantment = string.gsub(htmlString, "[a-zA-Z0-9%s<>/#'=]+enhancement[a-zA-Z0-9%s<>/#'=]+%.", "")
	cleanEnchantment = string.gsub(cleanEnchantment, "[a-zA-Z0-9%s<>/#'=]+augment[a-zA-Z0-9%s<>/#'=]+%.", "")
	return cleanEnchantment
end

function insertIdentify(itemNamePlain, itemNameANSI, itemNameHTML, itemIdentifyPlain, itemIdentifyANSI, itemIdentifyHTML)
	db = "sk_items"
	DatabaseOpen (db, GetInfo (66) .. "sk_items.sqlite", 6)
	queryName = 'INSERT INTO items(item_name_plain, item_name_ansi, item_name_html) VALUES ("' .. sanitizeSQL(itemNamePlain) .. '", "' .. sanitizeSQL(itemNameANSI) .. '", "' .. sanitizeSQL(itemNameHTML) .. '");'
	DatabasePrepare (db, queryName)
	DatabaseStep (db)
	DatabaseFinalize (db)

	query = 'UPDATE items SET item_identify_plain = "' .. sanitizeSQL(itemIdentifyPlain) .. '", item_identify_ansi = "' .. sanitizeSQL(itemIdentifyANSI) .. '", item_identify_html = "' .. sanitizeSQL(itemIdentifyHTML) .. '" WHERE item_name_ansi = "' .. sanitizeSQL(itemNameANSI) .. '";'
	DatabasePrepare (db, query)
	DatabaseStep (db)
	DatabaseFinalize (db)
	DatabaseClose (db)	
end


function insertLore(itemNamePlain, itemNameANSI, itemNameHTML, itemLoreStoryPlain, itemLoreStoryANSI, itemLoreStoryHTML, itemLoreIdentifyPlain, itemLoreIdentifyANSI, itemLoreIdentifyHTML)
	db = "sk_items"
	DatabaseOpen (db, GetInfo (66) .. "sk_items.sqlite", 6)
	queryName = 'INSERT INTO items(item_name_plain, item_name_ansi, item_name_html) VALUES ("' .. sanitizeSQL(itemNamePlain) .. '", "' .. sanitizeSQL(itemNameANSI) .. '", "' .. sanitizeSQL(itemNameHTML) .. '");'
	DatabasePrepare (db, queryName)
	DatabaseStep (db)
	DatabaseFinalize (db)
	query = 'UPDATE items SET item_lore_story_plain = "' .. sanitizeSQL(itemLoreStoryPlain) .. '", item_lore_story_ansi = "' .. sanitizeSQL(itemLoreStoryANSI) .. '", item_lore_story_html = "' .. sanitizeSQL(itemLoreStoryHTML) .. '", item_lore_identify_plain = "' .. sanitizeSQL(itemLoreIdentifyPlain) .. '", item_lore_identify_ansi = "' .. sanitizeSQL(itemLoreIdentifyANSI) .. '", item_lore_identify_html = "' .. sanitizeSQL(itemLoreIdentifyHTML) .. '" WHERE item_name_ansi = "' .. sanitizeSQL(itemNameANSI) .. '";'
	DatabasePrepare (db, query)
	DatabaseStep (db)
	DatabaseFinalize (db)
	
	DatabaseClose (db)	
end

function insertItem(itemArray)
	db = "sk_items"
	DatabaseOpen (db, GetInfo (66) .. "sk_items.sqlite", 6)
	updateSnippet = ""
	for fieldName, fieldData in pairs(itemArray) do
		if fieldData ~= "" and fieldName ~= "item_name_plain" and fieldName ~= "item_name_ansi" and fieldName ~= "item_name_html" then
			if updateSnippet == "" then
				updateSnippet = fieldName .. ' = "' .. sanitizeSQL(fieldData) .. '"'
			else
				updateSnippet = updateSnippet .. ", " .. fieldName .. ' = "' .. sanitizeSQL(fieldData) .. '"'
			end
		end
	end
	insertQuery = 'INSERT INTO items(item_name_plain, item_name_ansi, item_name_html) VALUES ("' .. sanitizeSQL(itemArray["item_name_plain"]) .. '", "' .. sanitizeSQL(itemArray["item_name_ansi"]) .. '", "' .. sanitizeSQL(itemArray["item_name_html"]) .. '");'
	DatabasePrepare (db, insertQuery)
	DatabaseStep (db)
	DatabaseFinalize (db)
	if updateSnippet ~= "" then
		updateQuery = 'UPDATE items SET ' .. updateSnippet .. ' WHERE item_name_ansi = "' .. sanitizeSQL(itemArray["item_name_ansi"]) .. '";'
		DatabasePrepare (db, updateQuery)
		DatabaseStep (db)
		DatabaseFinalize (db)
	end
	DatabaseClose (db)	
end

function findLastThisLine() 
	local line, total_lines
	total_lines = GetLinesInBufferCount ()
	loreLineNumber = -1
	checkLines = 1000
	
	if total_lines < checkLines then
		checkLines = total_lines - 1
	end
	for line = total_lines, total_lines - checkLines, -1 do
		currentLine = GetLineInfo(line, 1)
		
		if string.find(currentLine, "^This is") or string.find(currentLine, "^> This is") then
			loreLineNumber = line
			break
		end
	end
	return loreLineNumber
end

function getHTMLByLines(startPoint, endPoint)
	htmlHeader = "<table border=0 cellpadding=5 bgcolor='#000000'><tr><td><pre><code><font size='2' face='FixedSys, Lucida Console, Courier New, Courier'>"
	htmlFooter = "</font></code></pre></td></tr></table>"
	previousColor = ""
	generatedHTML = ""
	for line = startPoint, endPoint do
		lineString = GetLineInfo(line, 1)
		t = GetStyleInfo (line)
		for m, v in pairs (t) do
			tempInput = string.gsub(v.text, "^> ", "")
			if tempInput ~= "" then
				if generatedHTML == "" then
					generatedHTML = generatedHTML .. "<font color='" .. rgb_to_hex(v.textcolour) .. "'>" .. tempInput
				elseif previousColor == tostring(v.textcolour) then
					generatedHTML = generatedHTML .. tempInput
				else
					generatedHTML = generatedHTML .. "</font>" .. "<font color='" .. rgb_to_hex(v.textcolour) .. "'>" .. tempInput
				end
			end
			previousColor = tostring(v.textcolour)
		end
		if line ~= endPoint then
			generatedHTML = generatedHTML .. "<br>"
		end
	end
	if generatedHTML ~= "" then
		generatedHTML = htmlHeader .. generatedHTML .. "</font>" .. htmlFooter
	end
	return generatedHTML
end

function getHTMLNameByLine(startPoint, endPoint)
	htmlHeader = "<table border=0 cellpadding=5 bgcolor='#000000'><tr><td><pre><code><font size='2' face='FixedSys, Lucida Console, Courier New, Courier'>"
	htmlFooter = "</font></code></pre></td></tr></table>"
	generatedLine = ""
	generatedHTML = ""
	previousColor = ""
	itemNameCompleted = false
	for line = startPoint, endPoint do
		if itemNameCompleted then
			break
		end
		lineString = GetLineInfo(line, 1)
		lookAheadString = GetLineInfo(line + 1, 1)
		t = GetStyleInfo (line)
		for m, v in pairs (t) do
			titleTemp = string.gsub(v.text, "^> ", "")
			titleTemp = string.gsub(titleTemp, "^This is ", "")
			if string.find(titleTemp, ", a ") then
				lastChunk = string.sub(titleTemp, 1, string.find(titleTemp, ", a ") - 1)
				if lastChunk ~= "" then
					if previousColor ~= tostring(v.textcolour) then
						generatedHTML = generatedHTML .. "</font>" .. "<font color='" .. rgb_to_hex(v.textcolour) .. "'>" .. lastChunk
					else
						titleLineCompiled = titleLineCompiled .. lastChunk
					end
				end
				itemNameCompleted = true
				break
			elseif string.find(generatedHTML .. titleTemp, ", a ") then
				geneartedHTML = generatedHTML .. titleTemp
				generatedHTML = string.gsub(generatedHTML, ", a .*", "")
				itemNameCompleted = true
				break
			end
			if titleTemp ~= "" then
				if generatedHTML == "" then
					generatedHTML = generatedHTML .. "<font color='" .. rgb_to_hex(v.textcolour) .. "'>" .. titleTemp
				elseif previousColor == tostring(v.textcolour) then
					generatedHTML = generatedHTML .. titleTemp
				else
					generatedHTML = generatedHTML .. "</font>" .. "<font color='" .. rgb_to_hex(v.textcolour) .. "'>" .. titleTemp
				end
			end
			previousColor = tostring(v.textcolour)
		end
		if not itemNameCompleted then
			generatedHTML = generatedHTML .. " "
		end
	end
	if generatedHTML ~= "" then
		generatedHTML = htmlHeader .. generatedHTML .. "</font>" .. htmlFooter
	end
	return generatedHTML
end

function sayOutput(outputLocation, isSay)
	outputArray = {}
	outputArray[1] = ""
	longestParse = GetVariable(outputLocation) or ""
	if longestParse ~= "" then
		arrayIndex = 1
		splitString = string.gsub(longestParse, "vs.", "vs")
		for i in string.gmatch(splitString, "[^%.]+") do
			trimString = (i:gsub("^%s*", ""))
			if not string.find(trimString, "^%$[0-9]$") and not string.find(trimString, "^%$[0-9]%$I$") then
				if trimString ~= "" then
					if string.len (outputArray[arrayIndex]) + string.len (trimString .. ".  ") < 500 then
						outputArray[arrayIndex] = outputArray[arrayIndex] .. trimString .. ".  "
					else
						arrayIndex = arrayIndex + 1
						outputArray[arrayIndex] = trimString .. ".  "
					end
				end 
			end
		end
		lastColor = ""
		for outputCount = 1, #outputArray do 
			if isSay then
				Send("say " .. lastColor .. rtrim(outputArray[outputCount]))
			else
				Note("say " .. lastColor .. rtrim(outputArray[outputCount]))
			end
			lastColor = ""
			for w in string.gmatch(outputArray[outputCount], "\$[0-9]\$?") do
				lastColor = w
			end
			if string.sub(lastColor, -1) == "$" then
				lastColor = lastColor .. "I"
			end
		end
	end
end

function identifyQueueTrigger(numberOfItem)
	identifyQueue = tonumber(GetVariable("identifyQueue"))
	identifyQueue = identifyQueue + numberOfItem
	if identifyQueue < 0 then
		identifyQueue = 0
		EnableTrigger("identifyTrigger", false)
	elseif identifyQueue == 0 then
		EnableTrigger("identifyTrigger", false)
	else
		EnableTrigger("identifyTrigger", true)
	end
	SetVariable("identifyQueue", identifyQueue)
end

function loreQueueTrigger(numberOfItem)
	loreQueue = tonumber(GetVariable("loreQueue"))
	loreQueue = loreQueue + numberOfItem

	if loreQueue < 0 then
		loreQueue = 0
		EnableTrigger("loreTrigger", false)
	elseif loreQueue == 0 then
		EnableTrigger("loreTrigger", false)
	else
		EnableTrigger("loreTrigger", true)
	end
	SetVariable("loreQueue", loreQueue)
end

function getResultCount(query)
	db = "sk_items"
	DatabaseOpen (db, GetInfo (66) .. "sk_items.sqlite", 6)
	DatabasePrepare (db, query)
	names = DatabaseColumnNames (db)
	cols = DatabaseColumns (db)
	rc = DatabaseStep (db)
	counter = 0
	while rc == sqlite3.ROW do
		counter = counter + 1
		rc = DatabaseStep (db)
	end
	DatabaseFinalize (db)
	DatabaseClose (db)
	return counter
end

function searchDatabase(query)
	db = "sk_items"
	DatabaseOpen (db, GetInfo (66) .. "sk_items.sqlite", 6)
	DatabasePrepare (db, query)
	names = DatabaseColumnNames (db)
	cols = DatabaseColumns (db)
	rc = DatabaseStep (db)
	searchResults = {}
	while rc == sqlite3.ROW do
		values = DatabaseColumnValues (db)
		currentData = {}
		for i = 1, cols do
			currentData[names[i]] = values[i]
		end
		table.insert(searchResults, currentData)
		rc = DatabaseStep (db)
	end
	DatabaseFinalize (db)
	DatabaseClose (db)
	return searchResults
end

function deleteItem(itemId)
	db = "sk_items"
	DatabaseOpen (db, GetInfo (66) .. "sk_items.sqlite", 6)
	query = "DELETE FROM items WHERE item_id = " .. tostring(itemId) .. ";"
	DatabasePrepare (db, query)
	DatabaseStep (db)
	DatabaseFinalize (db)
	DatabaseClose (db)
end

function deleteAllItems()
	os.execute("del " .. GetInfo (66) .. "sk_items.sqlite")
	db = "sk_items"
	DatabaseOpen (db, GetInfo (66) .. "sk_items.sqlite", 6)
	status = DatabaseExec (db, [[
		DROP TABLE IF EXISTS items;
		CREATE TABLE IF NOT EXISTS items(
			item_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
			item_name_plain      TEXT NOT NULL DEFAULT '',
			item_name_ansi      TEXT NOT NULL UNIQUE,
			item_name_html      TEXT NOT NULL DEFAULT '',
			item_identify_plain    TEXT NOT NULL DEFAULT '',
			item_identify_ansi    TEXT NOT NULL DEFAULT '',
			item_identify_html    TEXT NOT NULL DEFAULT '',
			item_lore_identify_plain    TEXT NOT NULL DEFAULT '',
			item_lore_identify_ansi    TEXT NOT NULL DEFAULT '',
			item_lore_identify_html    TEXT NOT NULL DEFAULT '',
			item_lore_story_plain    TEXT NOT NULL DEFAULT '',
			item_lore_story_ansi    TEXT NOT NULL DEFAULT '',
			item_lore_story_html    TEXT NOT NULL DEFAULT ''
		);
	]])
	if status ~= sqlite3.OK then
		print ("Error creating items table: ", DatabaseError(db))
	end
	DatabaseClose (db)
	Note("Items Database Deleted")
end

function urlencode (s)
	return (string.gsub (s, "%W", 
		function (str)
			return string.format ("%%%02X", string.byte (str))
		end))
end

function fixrequest (req)
	local t = { }
	for k, v in pairs (req) do
		table.insert (t, urlencode(k) .. '=' .. urlencode(v))
	end
	return table.concat (t, "&")
end

function uploadItem(inp, ina, inh, iip, iia, iih, ilip, ilia, ilih, ilsp, ilsa, ilsh)
	request_body = fixrequest {ac = "ui", item_name_plain = inp, item_name_ansi = ina, item_name_html = inh, item_identify_plain = iip, item_identify_ansi = iia, item_identify_html = iih, item_lore_identify_plain = ilip, item_lore_identify_ansi = ilia, item_lore_identify_html = ilih, item_lore_story_plain = ilsp, item_lore_story_ansi = ilsa, item_lore_story_html = ilsh}
	response_body = {}
	socket.http.request {
		url = "http://shattered-kingdoms-302711.ue.r.appspot.com/",
		method = "POST",
		headers = {
			["Content-Length"] = string.len(request_body),
			["Content-Type"] =  "application/x-www-form-urlencoded"}, 
		source = ltn12.source.string(request_body),
		sink = ltn12.sink.table(response_body)
	}
end

function ParseCSVLine (line,sep) 
	local res = {}
	local pos = 1
	sep = sep or ','
	while true do 
		local c = string.sub(line,pos,pos)
		if (c == "") then break 
		end
		if (c == '"') then
			local txt = ""
			repeat
				local startp,endp = string.find(line,'^%b""',pos)
				txt = txt..string.sub(line,startp+1,endp-1)
				pos = endp + 1
				c = string.sub(line,pos,pos) 
				if (c == '"') then txt = txt..'"' end 
			until (c ~= '"')
			table.insert(res,txt)
			assert(c == sep or c == "")
			pos = pos + 1
		else	
			local startp,endp = string.find(line,sep,pos)
			if (startp) then 
				table.insert(res,string.sub(line,pos,startp-1))
				if string.sub(line, pos) == "," then
					table.insert(res, "")
				end
				pos = endp + 1
			else
				table.insert(res,string.sub(line,pos))
				break
			end 
		end
	end
	return res
end

function loadItemServerCSV()
	header = {}
	data = {}
	isHeader = true 
	request_body = fixrequest {ac = "gi"}
	response_body = {}
	client, code = socket.http.request {
		url = "http://shattered-kingdoms-302711.ue.r.appspot.com/",
		method = "POST",
		headers = {
			["Content-Length"] = string.len(request_body),
			["Content-Type"] =  "application/x-www-form-urlencoded"}, 
		source = ltn12.source.string(request_body),
		sink = ltn12.sink.table(response_body)
	}
	if code == 200 then
		serverCSV = table.concat(response_body)
		for line in string.gmatch(serverCSV, "[^\r\n]+") do
			if isHeader then
				for headerColumn in string.gmatch(line, '([^,]+)') do
					table.insert(header, headerColumn)
				end
				isHeader = false
			else 
				if Trim(string.gsub(line, ",", "")) ~= "" then
					updateTable = {}
					csvSingleData = ParseCSVLine(line, ",")
					for i, j in pairs(csvSingleData) do
						if j ~= ""  and i ~= 1 then
							updateTable[header[i]] = j
						end
					end
					insertItem(updateTable)
				end
			end 
		end
	end
	Note("Load Server Data Complete")
end

function loadItemServerUpdate()
	header = {}
	data = {}
	isHeader = true 
	request_body = fixrequest {ac = "gi"}
	response_body = {}
	client, code = socket.http.request {
		url = "http://shattered-kingdoms-302711.ue.r.appspot.com/",
		method = "POST",
		headers = {
			["Content-Length"] = string.len(request_body),
			["Content-Type"] =  "application/x-www-form-urlencoded"}, 
		source = ltn12.source.string(request_body),
		sink = ltn12.sink.table(response_body)
	}
	if code == 200 then
		serverCSV = table.concat(response_body)
		serverItemCounter = 0
		for line in string.gmatch(serverCSV, "[^\r\n]+") do
			serverItemCounter = serverItemCounter + 1
		end
		serverItemCounter = serverItemCounter - 1
		
		query = 'SELECT count(item_id) as count FROM items'
		searchResults = searchDatabase(query)
		itemInDatabase = searchResults[1]["count"] or 0

		if itemInDatabase < serverItemCounter then
			for line in string.gmatch(serverCSV, "[^\r\n]+") do
				if isHeader then
					for headerColumn in string.gmatch(line, '([^,]+)') do
						table.insert(header, headerColumn)
					end
					isHeader = false
				else 
					if Trim(string.gsub(line, ",", "")) ~= "" then
						updateTable = {}
						csvSingleData = ParseCSVLine(line, ",")
						for i, j in pairs(csvSingleData) do
							if j ~= ""  and i ~= 1 then
								updateTable[header[i]] = j
							end
						end
						query = 'SELECT item_id FROM items WHERE item_name_ansi = "' .. sanitizeSQL(updateTable["item_name_ansi"]) .. '"'
						searchResults = searchDatabase(query)
						if #searchResults == 0 then
							insertItem(updateTable)
						end
					end
				end 
			end
		end
	end
end

function downloadDatabase()
	request_body = fixrequest {ac = "gf"}
	response_body = {}
	filePath = GetInfo(66) .. "sk_items.sqlite"
	file = io.open(filePath, "wb")
	save = ltn12.sink.file(file)
	client, code = socket.http.request {
		url = "http://shattered-kingdoms-302711.ue.r.appspot.com/",
		method = "POST",
		headers = {
			["Content-Length"] = string.len(request_body),
			["Content-Type"] =  "application/x-www-form-urlencoded"}, 
		source = ltn12.source.string(request_body),
		sink = save
	}
end

function loadItemInfo(name, line, wildcards, styles)
	if string.find(styles[1].text, "<") then
		toDisplaySpell = false
		displayVisualLines = false
	else
		toDisplaySpell = true
		displayVisualLines = true
	end
	if isEscapeIdentify(line) or line == "" then
		EnableTrigger ("itemTrigger", false)
		for i, v in ipairs (styles) do
			ColourTell (RGBColourToName (v.textcolour), RGBColourToName (v.backcolour), v.text)
		end
	else
		for i, v in ipairs (styles) do
			ColourTell (RGBColourToName (v.textcolour), RGBColourToName (v.backcolour), v.text)
		end
		itemANSIName = stylesToANSIName(styles)
		query = 'SELECT item_identify_plain, item_lore_identify_plain FROM items WHERE item_name_ansi = "' .. itemANSIName .. '"'
		searchResults = searchDatabase(query)
		outputItemSpellInfo(line, searchResults, toDisplaySpell, false, displayVisualLines)
	end
	Note()
end

function loadStoreInfo(name, line, wildcards, styles)
	toDisplaySpell = false
	if isEscapeIdentify(line) then
		EnableTrigger ("storeTrigger", false)
		for i, v in ipairs (styles) do
			ColourTell (RGBColourToName (v.textcolour), RGBColourToName (v.backcolour), v.text)
		end
	elseif string.find(line, "^    Price: ") or string.find(line, "^$") then
		for i, v in ipairs (styles) do
			ColourTell (RGBColourToName (v.textcolour), RGBColourToName (v.backcolour), v.text)
		end
	else
		for i, v in ipairs (styles) do
			ColourTell (RGBColourToName (v.textcolour), RGBColourToName (v.backcolour), v.text)
		end
		itemANSIName = stylesToANSIName(styles)
		query = 'SELECT item_identify_plain, item_lore_identify_plain FROM items WHERE item_name_ansi = "' .. itemANSIName .. '"'
		searchResults = searchDatabase(query)
		outputItemSpellInfo(line, searchResults, toDisplaySpell, true)
	end
	Note()
end

function outputItemSpellInfo(itemString, searchResults, displaySpell, displayItemDetail, displayVisualLines)
	if #searchResults > 0 then
		displayVisualLines = displayVisualLines or false
		displayItemDetail = displayItemDetail or false
		itemIdentify = searchResults[1]["item_identify_plain"]
		itemIdentifyResults = getIdentifySpellandStrength(itemIdentify)
		loreIdentify = searchResults[1]["item_lore_identify_plain"]
		loreIdentifyResults = getLoreSpellandCharges(loreIdentify)
		itemStrength = itemIdentifyResults["itemStrength"] or ""
		itemSpell = ""
		if itemIdentifyResults["itemSpell"] ~= "" then
			itemSpell = itemIdentifyResults["itemSpell"]
		elseif loreIdentifyResults["itemSpell"] ~= "" then
			itemSpell = loreIdentifyResults["itemSpell"]
		end
		itemMaxCharges = loreIdentifyResults["itemMaxCharges"] or ""
		outputInfo = ""
		padding = ""
		detectedInfo = ""
		if displaySpell then
			if itemMaxCharges ~= "" then
				outputInfo = outputInfo .. "Max:" .. itemMaxCharges .. "|"
			end
			if itemStrength ~= "" then
				outputInfo = outputInfo .. itemStrength .. "|"
			end
			if itemSpell ~= "" then
				itemSpell = string.gsub(itemSpell, " and ", "+")
				itemSpell = string.gsub(itemSpell, ", ", "+")
				outputInfo = outputInfo .. itemSpell
			end
			if outputInfo ~= "" then
				outputInfo = string.gsub(outputInfo, "|$", "")
				outputInfo = "(" .. outputInfo .. ") "
			else 
				outputInfo = " "
			end
		end
		
		detectedInfo = ""
		if searchResults[1]["item_identify_plain"] ~= "" then
			detectedInfo = detectedInfo .. "I"
		else 
			detectedInfo = detectedInfo .. " "
		end
		if searchResults[1]["item_lore_identify_plain"] ~= "" then
			detectedInfo = detectedInfo .. "L"
		else 
			detectedInfo = detectedInfo .. " "
		end
		displayPadding(itemString, outputInfo, displayVisualLines, toDisplaySpell)
		ColourTell("lightpink", "black", outputInfo)
		ColourTell("orange", "black", detectedInfo)
		if displayItemDetail and (itemIdentify or loreIdentify) then
			spellDetail = getSpellDetail(itemIdentify, loreIdentify)
			if spellDetail ~= "" then
				ColourTell("lightpink", "black", "\n    " .. getSpellDetail(itemIdentify, loreIdentify))
			end
		end
	end
end

function getSpellDetail(itemIdentify, loreIdentify)
	return string.match(itemIdentify, "(The %a+ holds %d+ %a+ [a-zA-Z%s]*charges of [a-zA-Z%s%,]*%.)") 
		or string.match(itemIdentify, "(The %a+ has %a+ spells of [a-zA-Z%s%,]*%.)")
		or string.match(loreIdentify, "(The %a+ reportedly holds up to %d+ charges of [a-zA-Z%s%,]*%.)")
		or string.match(loreIdentify, "(The %a+ appears consistent with other %a+ that contain spells of [a-zA-Z%,%s]*%.)") or ""
end

function getIdentifySpellandStrength(itemIdentify) 
	itemStrength = ""
	itemSpell = ""
	if string.find(itemIdentify, "The %a+ holds %d+ %a+ [a-zA-Z%s]*charges of [a-zA-Z%s%,]*%.") then
		itemStrength = string.match(itemIdentify, "The %a+ holds %d+ (%a+) [a-zA-Z%s]*charges of [a-zA-Z%s%,]*%.")
		itemSpell = string.match(itemIdentify, "The %a+ holds %d+ %a+ [a-zA-Z%s]*charges of ([a-zA-Z%s%,]*)%.")
	elseif string.find(itemIdentify, "The %a+ has %a+ spells of [a-zA-Z%s%,]*%.") then
		itemStrength = string.match(itemIdentify, "The %a+ has (%a+) spells of [a-zA-Z%s%,]*%.")
		itemSpell = string.match(itemIdentify, "The %a+ has %a+ spells of ([a-zA-Z%s%,]*)%.")
	end
	
	return {itemStrength = itemStrength, itemSpell = itemSpell}
end

function getLoreSpellandCharges(loreIdentify) 
	itemMaxCharges = ""
	itemSpells = ""
	if string.find(loreIdentify, "The %a+ reportedly holds up to %d+ charges of [a-zA-Z%s%,]*%.") then
		itemMaxCharges = string.match(loreIdentify, "The %a+ reportedly holds up to (%d+) charges of [a-zA-Z%s%,]*%.")
		itemSpells = string.match(loreIdentify, "The %a+ reportedly holds up to %d+ charges of ([a-zA-Z%s%,]*)%.")
	elseif string.find(loreIdentify,"The %a+ appears consistent with other %a+ that contain spells of [a-zA-Z%,%s]*%.") then
		itemSpells = string.match(loreIdentify, "The %a+ appears consistent with other %a+ that contain spells of ([a-zA-Z%,%s]*)%.")
	end
	
	return {itemMaxCharges = itemMaxCharges, itemSpell = itemSpells}
end

function stylesToANSIName(styles)
	itemANSIName = ""
	if string.find(styles[1].text, "<") then
		table.remove(styles, 1)
		table.remove(styles, 1)
		table.remove(styles, 1)
		styles[1].text = string.gsub(styles[1].text, "^%s*", "")
	elseif string.find(styles[1].text, "%[") then
		styles[1].text = string.gsub(styles[1].text, "%[[%s0-9]+%]%s", "")
		styles[#styles].text = string.gsub(styles[#styles].text, " %- .*$", "")
		if styles[1].text == nil or styles[1].text == "" then
			table.remove(styles, 1)
		end
		if styles[#styles].text == nil or styles[#styles].text == "" then
			table.remove(styles, #styles)
		end
		styles[1].text = string.sub(styles[1].text, 1, 1):lower() .. string.sub(styles[1].text, 2)
	else
		styles[1].text = string.gsub(styles[1].text, "^%s*", "")
	end
	styles[#styles].text = string.gsub(styles[#styles].text, "%s%([a-zA-Z%s]+%)$", "")
	styles = stylesRemoveSacred(styles)
	for i, v in ipairs (styles) do
		v.text = string.gsub(v.text, "%(%s?[0-9]+%)%s", "")
		v.text = string.gsub(v.text, "%(Sacred%)%s", "")
		v.text = string.gsub(v.text, "%(Glowing%)%s", "")
		v.text = string.gsub(v.text, "%(Humming%)%s", "")
		v.text = string.gsub(v.text, "%(Invis%)%s", "")
		if v.text ~= "" then
			itemANSIName = itemANSIName .. getSKColor(v.textcolour) .. v.text
		end
	end
	
	return itemANSIName
end

function stylesRemoveSacred(styles)
	hasSacred = false
	sacredIndex = -1
	for i, v in ipairs (styles) do
		if v.text == "Sacred" and string.find(styles[i-1].text, "%($") and string.find(styles[i+1].text, "^%)") then
			sacredIndex = i
			hasSacred = true
		end
	end
	if hasSacred then
		if styles[sacredIndex+1].text == ") " then
			table.remove(styles, sacredIndex + 1)
		else
			styles[sacredIndex + 1].text = string.gsub(styles[sacredIndex + 1].text, "^%) ", "")
		end
		table.remove(styles, sacredIndex)
		if styles[sacredIndex + 1].text == ") " then
			table.remove(styles, sacredIndex-1)
		else
			styles[sacredIndex - 1].text = string.gsub(styles[sacredIndex - 1].text, "%($", "")
		end
	end
	return styles
end

function sanitizeSQL(itemString)
	sanitizeOutput = itemString
	sanitizeOutput = string.gsub(sanitizeOutput, '"', '""')
	--sanitizeOutput = string.gsub(sanitizeOutput, "'", "''")
	return sanitizeOutput
end

function displayPadding(itemLine, outputInfo, displayVisualLines, toDisplaySpell)
	isNewLine = false;
	toDisplaySpell = toDisplaySpell or false
	displayVisualLines = displayVisualLines or false
	reducedPadding = string.len(outputInfo)
	MAX_LINE = 80
	lineLength = string.len(itemLine)
	paddingCount = 0

	if lineLength > 80 then
		itemLineSub = string.sub(itemLine, 1, 80)
		itemLineReverse = itemLineSub:reverse()
		itemLineIndexReverse = string.find(itemLineReverse, " ")
		spaceIndex = #itemLineReverse - itemLineIndexReverse + 1
		newLinePadding = string.len(string.sub(itemLine, spaceIndex))
		paddingCount = MAX_LINE - 2 - newLinePadding
	elseif lineLength + reducedPadding <= 77 then
		paddingCount = MAX_LINE - lineLength - reducedPadding - 2
	elseif lineLength + reducedPadding > 77 then
		newLinePadding = MAX_LINE - lineLength
		inputSpaces(newLinePadding, displayVisualLines, false)
		Note()
		paddingCount = MAX_LINE - reducedPadding - 2
		isNewLine = true
	end
	inputSpaces(paddingCount, displayVisualLines, toDisplaySpell, isNewLine)
end

function inputSpaces(paddingCount, displayVisualLines, toDisplaySpell, isNewLine)
	toDisplaySpell = toDisplaySpell or false
	paddingSpaces = ""
	for i = 1, paddingCount do
		if displayVisualLines then
			if toDisplaySpell then
				if isNewLine and i >= 1 and i <= 5 then
					paddingSpaces = paddingSpaces .. " "
				else
					paddingSpaces = paddingSpaces .. "-"
				end
			else
				paddingSpaces = paddingSpaces .. "-"
			end
		else
			paddingSpaces = paddingSpaces .. " "
		end
	end
	ColourTell("silver", "black", paddingSpaces)
end

]]>
</script>
</muclient>