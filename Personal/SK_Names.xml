<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="SK_Names"
   author="Aello"
   id="A1B11111B1111CC11111213C"
   language="Lua"
   purpose="Manages names within the game"
   date_written="2018-05-12 10:45:35"
   requires="4.94"
   version="1.0"
   >
<description trim="y">
<![CDATA[
	Useful tools to manage the names in the game.
]]>
</description>

</plugin>

<triggers>
	<trigger
		enabled="y"
		match="^Alas, all good things must come to an end.$"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			mainPlayerList ={}
		</send>
	</trigger>
	<trigger
		enabled="y"
		match="^(?:\> )*(?:(?:\([0-9]?\) |))(?:(?:\([Invis]+\) |))(?:(?:\([Hidden]+\) |))([a-zA-Z]+) \((.*)\) is .*$"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			characterName = "%1"
			description = "%2"
			_, spaceCount = string.gsub(description, "[ ]", "")
			addedName = false
			for i,j in ipairs(databaseAddedNames) do
				if j == characterName then
					addedName = true
				end
			end
			if not addedName and spaceCount > 2 then
				db = "sk_names"
				query = "INSERT INTO names (name, description) VALUES ('%1', '%2')"
				DatabaseOpen (db, GetInfo (66) .. "sk_names.sqlite", 6)
				DatabasePrepare (db, query)
				DatabaseStep (db)
				DatabaseFinalize (db)
				DatabaseClose (db)
				table.insert(databaseAddedNames, characterName)
			end
		</send>
	</trigger>
	<trigger
		enabled="y"
		match="^\[(---|Elf|Spr|Gno|HEl|Hum|Gri|Min|Gia|Cen|Dwa|DEl|Hal) (---|Pal|Pri|Bar|Brb|Mer|Swa|Hel|Sha|Rog|Sco|Sor|War|Nec)\][\[a-zA-Z\]]* ([a-zA-Z]+).*$"
		regexp="y"
		send_to="12"
		sequence="100"
	>
	<send>table.insert(tempPlayerList, "%3")</send>
	</trigger>
	<trigger
		enabled="y"
		match="^Players found: .*$"
		regexp="y"
		send_to="12"
		sequence="100"
	>
		<send>
			newMarker = "bottom"
			if next(mainPlayerList) == nil then
				mainPlayerList = tempPlayerList
			else
				leaveList = {}
				joinList = {}
				for i,j in ipairs(mainPlayerList) do 
					uniqueName = true
					color = ""
					for k,l in ipairs(tempPlayerList) do
						if j == l then
							uniqueName = false
						end
					end
					if uniqueName then
						table.insert(leaveList, j)
					end
				end
				
				for i,j in ipairs(tempPlayerList) do 
					uniqueName = true
					color = ""
					for k,l in ipairs(mainPlayerList) do
						if j == l then
							uniqueName = false
						end
					end
					if uniqueName then
						table.insert(joinList, j)
					end
				end

				leaveString = ""
				joinString = ""
				if next(leaveList) ~= nil then
					for m,n in ipairs(leaveList) do 
						leaveString = leaveString .. " " .. n
					end
				end

				if next(joinList) ~= nil then
					for m,n in ipairs(joinList) do 
						joinString = joinString .. " " .. n
					end
				end

				if leaveString ~= "" or joinString ~= "" then
					ColourNote("silver", "black", "Who changes:", "red", "black", leaveString, "lime", "black", joinString)
				end
			end
			mainPlayerList = tempPlayerList
			tempPlayerList = {}
		</send>
	</trigger>
</triggers>
<aliases>
	<alias
		match="^name all$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			db = "sk_names"
			DatabaseOpen (db, GetInfo (66) .. "sk_names.sqlite", 6)
			DatabasePrepare (db, "SELECT name, description FROM names ORDER BY name")
			names = DatabaseColumnNames (db)
			cols = DatabaseColumns (db)
			rc = DatabaseStep (db)
			if rc == sqlite3.ROW then
				ColourNote("darkviolet", "black", "Display all entries:")
			else
				ColourNote("red", "black", "No data found.")
			end

			while rc == sqlite3.ROW do
				values = DatabaseColumnValues (db)
				ColourNote("darkorange", "black", "   " .. string.format ("%-15s", values[1]) .. " - " .. values[2])
				rc = DatabaseStep (db)
			end
			Note("")
			DatabaseFinalize (db)
			DatabaseClose (db)
		</send>
	</alias>
	<alias
		match="^name search ([a-zA-Z\-]+)$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			db = "sk_names"
			searchParameter = "%1"
			DatabaseOpen (db, GetInfo (66) .. "sk_names.sqlite", 6)
			DatabasePrepare (db, "SELECT name, description FROM names WHERE name LIKE '%" .. searchParameter .. "%' OR description LIKE '%" .. searchParameter .. "%' ORDER BY name")
			names = DatabaseColumnNames (db)
			cols = DatabaseColumns (db)
			rc = DatabaseStep (db)
			if rc == sqlite3.ROW then
				ColourNote("darkviolet", "black", "Search Results for '%1':")
			else
				ColourNote("red", "black", "No search results found.")
			end
			while rc == sqlite3.ROW do
				values = DatabaseColumnValues (db)
				ColourNote("darkorange", "black", "   " .. string.format ("%-15s", values[1]) .. " - " .. values[2])
				rc = DatabaseStep (db) 
			end
			Note("")
			DatabaseFinalize (db)
			DatabaseClose (db) 
		</send>
	</alias>
	<alias
		match="^name import ([a-zA-Z]+) \((.*)\) is .*$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			Simulate("%1 (%2) is here.")
			ColourNote("darkviolet", "black", "%1 - %2 - Successfully Imported")
		</send>
	</alias>
	<alias
		match="^name export$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="40"
	>
		<send>
			db = "sk_names"
			DatabaseOpen (db, GetInfo (66) .. "sk_names.sqlite", 6)
			DatabasePrepare (db, "SELECT name, description FROM names ORDER BY name")
			names = DatabaseColumnNames (db)
			cols = DatabaseColumns (db)
			rc = DatabaseStep (db)
			if rc == sqlite3.ROW then
				ColourNote("darkviolet", "black", "Export Raw Data:")
			else
				ColourNote("red", "black", "No data to export.")
			end

			while rc == sqlite3.ROW do
				values = DatabaseColumnValues (db)
				ColourNote("darkorange", "black", "name import " .. values[1] .. " (" .. values[2] .. ") is here.")
				rc = DatabaseStep (db)  -- read next row
			end -- while loop
			Note("")
			DatabaseFinalize (db)
			DatabaseClose (db)
		</send>
	</alias>
	<alias
		match="^name.*$"
		enabled="y"
		regexp="y"
		send_to="12"
		sequence="41"
	>
		<send>ColourNote("red", "black", "Invalid name command")</send>
	</alias>
</aliases>

<script>
<![CDATA[
	db = "sk_names"
	databaseAddedNames = {}
	tempPlayerList = {}
	mainPlayerList = {}
	function OnPluginInstall()
		DatabaseOpen (db, GetInfo (66) .. "sk_names.sqlite", 6)
		status = DatabaseExec (db, [[
		CREATE TABLE IF NOT EXISTS names(
			name_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
			name      TEXT NOT NULL UNIQUE,
			description    TEXT NOT NULL
		  );
		  ]])
			  
		if status ~= sqlite3.OK then
			print ("Error creating names table: ", DatabaseError(db))
		end
		
		DatabaseClose (db)
	end 
]]>
</script>
</muclient>